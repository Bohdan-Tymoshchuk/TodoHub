// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TodoHub.Infrastructure.Persistence;

#nullable disable

namespace TodoHub.Infrastructure.Migrations
{
    [DbContext(typeof(TodoDbContext))]
    [Migration("20250630233710_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TodoHub.Domain.Entities.TodoCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastUpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("TodoCollections");
                });

            modelBuilder.Entity("TodoHub.Domain.Entities.TodoSharedCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastUpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TodoCollectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TodoCollectionId");

                    b.HasIndex("UserId");

                    b.ToTable("TodoSharedCollections");
                });

            modelBuilder.Entity("TodoHub.Domain.Entities.TodoTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastUpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("TodoCollectionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TodoCollectionId");

                    b.ToTable("TodoTasks");
                });

            modelBuilder.Entity("TodoHub.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TodoHub.Domain.Entities.TodoCollection", b =>
                {
                    b.HasOne("TodoHub.Domain.Entities.User", "Owner")
                        .WithMany("TodoCollections")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TodoHub.Domain.Entities.TodoSharedCollection", b =>
                {
                    b.HasOne("TodoHub.Domain.Entities.TodoCollection", "TodoCollection")
                        .WithMany("TodoSharedCollections")
                        .HasForeignKey("TodoCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TodoHub.Domain.Entities.User", "User")
                        .WithMany("TodoSharedCollections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TodoCollection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TodoHub.Domain.Entities.TodoTask", b =>
                {
                    b.HasOne("TodoHub.Domain.Entities.TodoCollection", "TodoCollection")
                        .WithMany("TodoTasks")
                        .HasForeignKey("TodoCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TodoCollection");
                });

            modelBuilder.Entity("TodoHub.Domain.Entities.TodoCollection", b =>
                {
                    b.Navigation("TodoSharedCollections");

                    b.Navigation("TodoTasks");
                });

            modelBuilder.Entity("TodoHub.Domain.Entities.User", b =>
                {
                    b.Navigation("TodoCollections");

                    b.Navigation("TodoSharedCollections");
                });
#pragma warning restore 612, 618
        }
    }
}
